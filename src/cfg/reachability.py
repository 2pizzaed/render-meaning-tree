from dataclasses import dataclass, field
from typing import Optional, Any, Self

from src.common_utils import DictLikeDataclass


@dataclass
class ReachInfo(DictLikeDataclass):
    """General info about a finite path on CFG.
       Путь по графу: конечный, задаётся двумя узлами и представляет собой кратчайший путь между ними.
       Может замыкаться на одном действии AST, но при этом не будет на самом деле замкнутым, т.к. начало и конец действия обычно представлены различными узлами CFG.
       Узел-источник не учитывается в подсчёте, а узел-назначение считается,
       таким образом, число пройденных рёбер равняется числу пройденных узлов CFG,
        поэтому пути легко складывать, не производя накладок в точке соединения.
    """
    from_: str  # id узла
    to: str  # id узла
    ways_count: int  # число всевозможных нециклических путей по ориентированному графу CFG между указанными точками (0 - нет никакого пути)
    cfg_steps: int  # Число пройденных узлов CFG, без учёта их содержимого = число пройденных рёбер
    ast_actions: int  # Число узлов c непустым AST node на пути
    transparent_actions: int  # Число узлов с заданным AST node, которые считаются "прозрачными" для студента в том смысле, что он с ними не взаимодействует (вариант "может нажать, а может и не нажать" пока не рассматривается)
    opaque_actions: int  # Число узлов с заданным AST node, которые считаются "непрозрачными" для студента в том смысле, что он должен обязательно их нажать, чтобы пройти по пути
    conditions: int  # Число узлов с заданным AST node, которые относятся к непустым управляющим условиям и должны обязательно быть нажаты студентом
    frame_changes: int  # Число смен фрейма функции (могут встречаться как в узлах, так и на рёбрах)
    frames_added: int  # Число входов в функцию (любую)
    frames_dropped: int  # Число выходов из функции (любой)



