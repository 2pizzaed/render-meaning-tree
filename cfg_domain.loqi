//-------------------STATIC (CLASS) SECTION-------------------
//------------------------------------------------------------

enum OriginType {
	parent [
		RU.localizedName = "родительский" ;
		EN.localizedName = "parent" ;
		TEMPLATING_ID = 1 ;
	],
	previous [
		RU.localizedName = "предыдущий" ;
		EN.localizedName = "previous" ;
		TEMPLATING_ID = 2 ;
	],
} [
	RU.localizedName = "тип происхождения" ;
	EN.localizedName = "origin type" ;
	TEMPLATING_ID = 3 ;
]

enum RoleInListType {
	first_in_list [
		RU.localizedName = "первый в списке" ;
		EN.localizedName = "first in list" ;
		TEMPLATING_ID = 4 ;
	],
	next_in_list [
		RU.localizedName = "следующий в списке" ;
		EN.localizedName = "next in list" ;
		TEMPLATING_ID = 5 ;
	],
} [
	RU.localizedName = "роль в списке" ;
	EN.localizedName = "role in list" ;
	TEMPLATING_ID = 6 ;
]

enum InterruptionType {
	break [
		RU.localizedName = "прерывание" ;
		EN.localizedName = "break" ;
		TEMPLATING_ID = 7 ;
	],
	continue [
		RU.localizedName = "продолжение" ;
		EN.localizedName = "continue" ;
		TEMPLATING_ID = 8 ;
	],
	return [
		RU.localizedName = "возврат" ;
		EN.localizedName = "return" ;
		TEMPLATING_ID = 9 ;
	],
	exception [
		RU.localizedName = "исключение" ;
		EN.localizedName = "exception" ;
		TEMPLATING_ID = 10 ;
	],
} [
	RU.localizedName = "тип прерывания" ;
	EN.localizedName = "interruption type" ;
	TEMPLATING_ID = 11 ;
]

enum CallStackAction {
	add_frame [
		RU.localizedName = "добавить кадр" ;
		EN.localizedName = "add frame" ;
		TEMPLATING_ID = 12 ;
	],
	drop_frame [
		RU.localizedName = "удалить кадр" ;
		EN.localizedName = "drop frame" ;
		TEMPLATING_ID = 13 ;
	],
} [
	RU.localizedName = "действие стека вызовов" ;
	EN.localizedName = "call stack action" ;
	TEMPLATING_ID = 14 ;
]

enum ConditionValue {
	true [
		RU.localizedName = "истина" ;
		EN.localizedName = "true" ;
		TEMPLATING_ID = 15 ;
	],
	false [
		RU.localizedName = "ложь" ;
		EN.localizedName = "false" ;
		TEMPLATING_ID = 16 ;
	],
} [
	RU.localizedName = "значение условия" ;
	EN.localizedName = "condition value" ;
	TEMPLATING_ID = 17 ;
]

enum InterruptionMode {
	exception [
		RU.localizedName = "исключение" ;
		EN.localizedName = "exception" ;
		TEMPLATING_ID = 18 ;
	],
	any [
		RU.localizedName = "любое" ;
		EN.localizedName = "any" ;
		TEMPLATING_ID = 19 ;
	],
} [
	RU.localizedName = "режим прерывания" ;
	EN.localizedName = "interruption mode" ;
	TEMPLATING_ID = 20 ;
]

class Effects {
	obj prop interruption_stop: InterruptionType ;
	obj prop interruption_start: InterruptionType ;
	obj prop call_stack: CallStackAction ;
} [
	RU.localizedName = "эффекты" ;
	EN.localizedName = "effects" ;
	TEMPLATING_ID = 21 ;
]

class Identification {
	obj prop origin: OriginType ;
	obj prop property: string ;
	obj prop property_path: string ;
	obj prop role_in_list: RoleInListType ;
} [
	RU.localizedName = "идентификация" ;
	EN.localizedName = "identification" ;
	TEMPLATING_ID = 22 ;
]

class Behaviour {
	obj prop assumed_value: bool ;
} [
	RU.localizedName = "поведение" ;
	EN.localizedName = "behaviour" ;
	TEMPLATING_ID = 23 ;
]

class Constraints {
	obj prop condition_value: ConditionValue ;
	obj prop interruption_mode: InterruptionMode ;
} [
	RU.localizedName = "ограничения" ;
	EN.localizedName = "constraints" ;
	TEMPLATING_ID = 24 ;
]

class KindChain {
	obj prop chain: string ;
} [
	RU.localizedName = "цепочка типов" ;
	EN.localizedName = "kind chain" ;
	TEMPLATING_ID = 25 ;
]

class ActionSpec {
	obj prop role: string ;
	obj prop kind: KindChain ;
	obj prop generalization: string ;
	obj prop effects: string ;
	obj prop identification: Identification ;
	obj prop behaviour: Behaviour ;
} [
	RU.localizedName = "спецификация действия" ;
	EN.localizedName = "action specification" ;
	TEMPLATING_ID = 26 ;
]

class TransitionSpec {
	obj prop from_: string ;
	obj prop to: string ;
	obj prop to_when_absent: string ;
	obj prop constraints: Constraints ;
	obj prop effects: string ;
} [
	RU.localizedName = "спецификация перехода" ;
	EN.localizedName = "transition specification" ;
	TEMPLATING_ID = 27 ;
]

class ConstructSpec {
	obj prop name: string ;
	obj prop kind: KindChain ;
	obj prop ast_node: string ;
	obj prop actions: string ;
	obj prop id2action: string ;
	obj prop transitions: string ;
	obj prop effects: string ;

	rel hasAction(ActionSpec) : {1 -> *} ;
	rel hasTransition(TransitionSpec) : {1 -> *} ;
} [
	RU.localizedName = "спецификация конструкции" ;
	EN.localizedName = "construct specification" ;
	TEMPLATING_ID = 28 ;
]

class Metadata {
	obj prop assumed_value: bool ;
	obj prop ast_node: string ;
	obj prop primary: bool ;
	obj prop is_after_last: bool ;
	obj prop call_count: int ;
	obj prop abstract_action: ActionSpec ;
	obj prop wrapped_ast: string ;
	obj prop abstract_transition: TransitionSpec ;
} [
	RU.localizedName = "метаданные" ;
	EN.localizedName = "metadata" ;
	TEMPLATING_ID = 29 ;
]

class Node {
	obj prop id: string ;
	obj prop role: string ;
	obj prop kind: string ;
	obj prop effects: string ;
	obj prop metadata: Metadata ;

	rel belongsTo(CFG) : opposite to CFG->hasNode ;
} [
	RU.localizedName = "узел" ;
	EN.localizedName = "node" ;
	TEMPLATING_ID = 30 ;
]

class Edge {
	obj prop id: string ;
	obj prop src: string ;
	obj prop dst: string ;
	obj prop constraints: Constraints ;
	obj prop effects: string ;
	obj prop metadata: Metadata ;

	rel belongsTo(CFG) : opposite to CFG->hasEdge ;
	rel connects(Node, Node) : {1 -> 2} ;
} [
	RU.localizedName = "ребро" ;
	EN.localizedName = "edge" ;
	TEMPLATING_ID = 31 ;
]

class CFG {
	obj prop id: string ;
	obj prop name: string ;

	rel hasNode(Node) : {1 -> *} ;
	rel hasEdge(Edge) : {1 -> *} ;
	rel hasBegin(Node) : {1 -> 1} ;
	rel hasEnd(Node) : {1 -> 1} ;
} [
	RU.localizedName = "граф потока управления" ;
	EN.localizedName = "control flow graph" ;
	TEMPLATING_ID = 32 ;
]

class ASTNodeWrapper {
	obj prop ast_node: string ;
	obj prop metadata: Metadata ;

	rel hasParent(ASTNodeWrapper) : {* -> 1} ;
	rel hasChildren(ASTNodeWrapper) : {1 -> *} ;
} [
	RU.localizedName = "обёртка узла AST" ;
	EN.localizedName = "AST node wrapper" ;
	TEMPLATING_ID = 33 ;
]

class CFGBuilder {
	obj prop constructs: string ;
	obj prop func_cfgs: string ;
	obj prop collect_global_functions_only: bool ;

	rel builds(CFG) : {1 -> *} ;
	rel uses(ConstructSpec) : {1 -> *} ;
} [
	RU.localizedName = "построитель CFG" ;
	EN.localizedName = "CFG builder" ;
	TEMPLATING_ID = 34 ;
]

//-----------------------OBJECT SECTION-----------------------
//------------------------------------------------------------

obj defaultKindChain : KindChain {
	chain = "" ;
} [
	RU.localizedName = "пустая цепочка типов" ;
	EN.localizedName = "empty kind chain" ;
	TEMPLATING_ID = 35 ;
]

obj beginAction : ActionSpec {
	role = "BEGIN" ;
	kind = defaultKindChain ;
	generalization = "" ;
	effects = "" ;
	identification = Identification() ;
	behaviour = Behaviour() ;
} [
	RU.localizedName = "действие начала" ;
	EN.localizedName = "begin action" ;
	TEMPLATING_ID = 36 ;
]

obj endAction : ActionSpec {
	role = "END" ;
	kind = defaultKindChain ;
	generalization = "" ;
	effects = "" ;
	identification = Identification() ;
	behaviour = Behaviour() ;
} [
	RU.localizedName = "действие конца" ;
	EN.localizedName = "end action" ;
	TEMPLATING_ID = 37 ;
]

obj emptyMetadata : Metadata {
	assumed_value = false ;
	ast_node = "" ;
	primary = false ;
	is_after_last = false ;
	call_count = 0 ;
	abstract_action = beginAction ;
	wrapped_ast = "" ;
	abstract_transition = TransitionSpec() ;
} [
	RU.localizedName = "пустые метаданные" ;
	EN.localizedName = "empty metadata" ;
	TEMPLATING_ID = 38 ;
]

obj emptyIdentification : Identification {
	origin = OriginType:parent ;
	property = "" ;
	property_path = "" ;
	role_in_list = RoleInListType:first_in_list ;
} [
	RU.localizedName = "пустая идентификация" ;
	EN.localizedName = "empty identification" ;
	TEMPLATING_ID = 39 ;
]

obj emptyBehaviour : Behaviour {
	assumed_value = false ;
} [
	RU.localizedName = "пустое поведение" ;
	EN.localizedName = "empty behaviour" ;
	TEMPLATING_ID = 40 ;
]

obj emptyConstraints : Constraints {
	condition_value = ConditionValue:true ;
	interruption_mode = InterruptionMode:any ;
} [
	RU.localizedName = "пустые ограничения" ;
	EN.localizedName = "empty constraints" ;
	TEMPLATING_ID = 41 ;
]

obj emptyEffects : Effects {
	interruption_stop = InterruptionType:break ;
	interruption_start = InterruptionType:break ;
	call_stack = CallStackAction:add_frame ;
} [
	RU.localizedName = "пустые эффекты" ;
	EN.localizedName = "empty effects" ;
	TEMPLATING_ID = 42 ;
]
